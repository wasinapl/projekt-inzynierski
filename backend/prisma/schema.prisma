datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum DocumentStatus {
  CREATED
  PROCESSING
  FAILED
  READY
}

enum DocumentType {
  TEXT
  FILE
}

enum DocumentPartStatus {
  CREATED
  PROCESSING
  FAILED
  READY
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String?
  password     String
  role         Role           @default(USER)
  Document     Document[]
  DocumentsSet DocumentsSet[]
  ChatThread   ChatThread[]
}

model DocumentsSet {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  name        String
  description String?
  userId      Int?
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents   Document[]   @relation()
  ChatThreads ChatThread[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  public      Boolean      @default(false)
}

model Document {
  id             Int            @id @default(autoincrement())
  code           String         @unique
  title          String
  content        String         @db.LongText
  documentsSetId Int
  documentsSet   DocumentsSet   @relation(fields: [documentsSetId], references: [id], onDelete: Cascade)
  userId         Int
  User           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  DocumentPart   DocumentPart[]

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  type      DocumentType   @default(TEXT)
  status    DocumentStatus @default(CREATED)
}

model DocumentPart {
  id                    Int                    @id @default(autoincrement())
  content               String                 @db.Text
  tokens                Int
  documentId            Int
  Document              Document               @relation(fields: [documentId], references: [id], onDelete: Cascade)
  DocumentPartEmbedding DocumentPartEmbedding?

  status DocumentPartStatus @default(CREATED)
}

model DocumentPartEmbedding {
  id             Int          @id @default(autoincrement())
  documentPartId Int          @unique
  documentPart   DocumentPart @relation(fields: [documentPartId], references: [id], onDelete: Cascade)
  vector         Json
}

model ChatThread {
  id             Int          @id @default(autoincrement())
  code           String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  messages       Message[]
  documentsSetId Int
  DocumentsSet   DocumentsSet @relation(fields: [documentsSetId], references: [id], onDelete: Cascade)
  userId         Int
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SenderType {
  USER
  AI
}

model Message {
  id           Int        @id @default(autoincrement())
  content      String     @db.Text
  createdAt    DateTime   @default(now())
  chatThreadId Int
  ChatThread   ChatThread @relation(fields: [chatThreadId], references: [id], onDelete: Cascade)
  senderType   SenderType
}

model ResponseLog {
  id        Int      @id @default(autoincrement())
  input     Json
  output    Json
  createdAt DateTime @default(now())
}
